/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.device;

import gui.Home;
import hot.domain.entities.device.Device;
import hot.domain.entities.device.commands.DeviceOffCommand;
import hot.domain.entities.device.commands.DeviceOnCommand;
import hot.domain.entities.device.extensions.IActuator;
import hot.domain.entities.device.extensions.ITemperatureChanger;
import hot.domain.entities.device.extensions.ITemperatureSensor;
import hot.domain.entities.device.extensions.ITimer;
import hot.domain.entities.house.adapters.SwingHouseAdapter;
import javax.swing.JOptionPane;

/**
 *
 * @author Me
 */
public class DeviceDetailsDialog extends javax.swing.JDialog {

    private final SwingHouseAdapter swingHouseAdapter;

    private final Device device;

    private final boolean firstInit;

    /**
     * Creates new form DeviceDetailsDialog
     *
     * @param parent
     * @param modal
     * @param device
     */
    public DeviceDetailsDialog(Home parent, boolean modal, Device device) {

        super(parent, modal);

        swingHouseAdapter = parent.getSwingHouseAdapter();

        this.device = device;

        initComponents();

        deviceNameTextField.setText((String) parent
                .getAvailableDevicesComboBox()
                .getSelectedItem());

        toggleFields();

        firstInit = true;
    }

    private void toggleFields() {

        toggleActuatorFields();

        toggleTemperatureSensorFields();

        toggleTemperatureChangerFields();

        toggleTimerFields();
        
        //pack();
    }

    private void toggleActuatorFields() {
        if (device instanceof IActuator) {
            if (((IActuator) device).isOn()) {
                turnOnDeviceToggleButton.setText("On");
                turnOnDeviceToggleButton.setSelected(true);
            } else {
                turnOnDeviceToggleButton.setText("Off");
                turnOnDeviceToggleButton.setSelected(false);
            }
        } else {
            deviceNameTextField.setVisible(false);
            turnOnDeviceToggleButton.setVisible(false);
        }
    }

    private void toggleTemperatureSensorFields() {
        if (device instanceof ITemperatureSensor) {
            currentTemperatureTextField.setVisible(true);
            celsiusDegreeLabel.setVisible(true);
            currentTemperatureLabel.setVisible(true);
            if (((IActuator) device).isOn()) {
                currentTemperatureTextField.setEnabled(true);
                currentTemperatureTextField.setText(
                        Double.toString(((ITemperatureSensor) device).getTemperature()));
            } else {
                currentTemperatureTextField.setText("");
                currentTemperatureTextField.setEnabled(false);
            }
        } else {
            currentTemperatureTextField.setVisible(false);
            celsiusDegreeLabel.setVisible(false);
            currentTemperatureLabel.setVisible(false);
        }
    }

    private void toggleTemperatureChangerFields() {
        if (device instanceof ITemperatureChanger) {
            changeTemperatureButton.setVisible(true);
            if (((IActuator) device).isOn()) {
                changeTemperatureButton.setEnabled(true);
            } else {
                changeTemperatureButton.setEnabled(false);
            }
        } else {
            changeTemperatureButton.setVisible(false);
        }
    }

    private void toggleTimerFields() {
        if (device instanceof ITimer) {
            timerLabel.setVisible(true);
            timerField.setVisible(true);
            secondsLabel.setVisible(true);
            startTimerButton.setVisible(true);
            if (((IActuator) device).isOn()) {
                //timerField.setEnabled(true);
                //startTimerButton.setEnabled(true);
            } else {
                //timerField.setEnabled(false);
                //startTimerButton.setEnabled(false);
            }
        } else {
            timerLabel.setVisible(false);
            timerField.setVisible(false);
            secondsLabel.setVisible(false);
            startTimerButton.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deviceDetailsPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        deviceNameTextField = new javax.swing.JTextField();
        turnOnDeviceToggleButton = new javax.swing.JToggleButton();
        currentTemperatureLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        currentTemperatureTextField = new javax.swing.JTextField();
        celsiusDegreeLabel = new javax.swing.JLabel();
        changeTemperatureButton = new javax.swing.JButton();
        timerLabel = new javax.swing.JLabel();
        startTimerButton = new javax.swing.JButton();
        timerField = new javax.swing.JTextField();
        secondsLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Device Details");
        setResizable(false);

        deviceDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Device Details"));

        nameLabel.setText("Name:");

        deviceNameTextField.setEnabled(false);

        turnOnDeviceToggleButton.setText("Off");
        turnOnDeviceToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOnDeviceToggleButtonActionPerformed(evt);
            }
        });

        currentTemperatureLabel.setText("Current Temperature:");

        statusLabel.setText("Status:");

        currentTemperatureTextField.setEnabled(false);

        celsiusDegreeLabel.setText("ÂºC");

        changeTemperatureButton.setText("Change Temperature");
        changeTemperatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeTemperatureButtonActionPerformed(evt);
            }
        });

        timerLabel.setText("Timer:");

        startTimerButton.setText("Start Timer");
        startTimerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTimerButtonActionPerformed(evt);
            }
        });

        secondsLabel.setText("s");

        javax.swing.GroupLayout deviceDetailsPanelLayout = new javax.swing.GroupLayout(deviceDetailsPanel);
        deviceDetailsPanel.setLayout(deviceDetailsPanelLayout);
        deviceDetailsPanelLayout.setHorizontalGroup(
            deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deviceDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deviceDetailsPanelLayout.createSequentialGroup()
                        .addComponent(deviceNameTextField)
                        .addContainerGap())
                    .addGroup(deviceDetailsPanelLayout.createSequentialGroup()
                        .addGroup(deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(statusLabel)
                            .addComponent(currentTemperatureLabel)
                            .addComponent(timerLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(deviceDetailsPanelLayout.createSequentialGroup()
                        .addGroup(deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(currentTemperatureTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(timerField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(celsiusDegreeLabel)
                            .addComponent(secondsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(changeTemperatureButton, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(startTimerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
            .addComponent(turnOnDeviceToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        deviceDetailsPanelLayout.setVerticalGroup(
            deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deviceDetailsPanelLayout.createSequentialGroup()
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deviceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(turnOnDeviceToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentTemperatureLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentTemperatureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(celsiusDegreeLabel)
                    .addComponent(changeTemperatureButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timerLabel)
                .addGap(4, 4, 4)
                .addGroup(deviceDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondsLabel)
                    .addComponent(startTimerButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deviceDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deviceDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void turnOnDeviceToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOnDeviceToggleButtonActionPerformed
        if (turnOnDeviceToggleButton.getText().equals("Off")) {
            new DeviceOnCommand(((IActuator) device)).execute();
        } else {
            new DeviceOffCommand(((IActuator) device)).execute();
        }
        toggleFields();
    }//GEN-LAST:event_turnOnDeviceToggleButtonActionPerformed

    private void changeTemperatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeTemperatureButtonActionPerformed
        double value;
        do {
            String temperature = JOptionPane.showInputDialog("Please input the desired temperature:");
            try {
                value = Double.parseDouble(temperature);
            } catch (Exception e) {
                value = -1;
            }
        } while (value < 0 || value > 80);
        ((ITemperatureChanger) device).setTemperature(value);
        currentTemperatureTextField.setText(Double.toString(((ITemperatureSensor) device).getTemperature()));
    }//GEN-LAST:event_changeTemperatureButtonActionPerformed

    private void startTimerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimerButtonActionPerformed
        Thread thread = new Thread() {
            @Override
            public void run() {
                ((ITimer) device).startTimer(Integer.parseInt(timerField.getText()));
                turnOnDeviceToggleButton.setText("On");
                turnOnDeviceToggleButton.setSelected(true);
                while (((IActuator) device).isOn()) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                    }
                }
                turnOnDeviceToggleButton.setText("Off");
                turnOnDeviceToggleButton.setSelected(false);
            }
        };
        thread.start();
    }//GEN-LAST:event_startTimerButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel celsiusDegreeLabel;
    private javax.swing.JButton changeTemperatureButton;
    private javax.swing.JLabel currentTemperatureLabel;
    private javax.swing.JTextField currentTemperatureTextField;
    private javax.swing.JPanel deviceDetailsPanel;
    private javax.swing.JTextField deviceNameTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel secondsLabel;
    private javax.swing.JButton startTimerButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField timerField;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JToggleButton turnOnDeviceToggleButton;
    // End of variables declaration//GEN-END:variables
}
